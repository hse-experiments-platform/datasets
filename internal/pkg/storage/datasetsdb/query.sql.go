// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package datasetsdb

import (
	"context"
)

const createEmptyDatasetData = `-- name: CreateEmptyDatasetData :exec
INSERT INTO datasets_data (dataset_id, raw_data_chunks, min_row_number, max_row_number)
VALUES ($1, array []::bytea[], array []::bigint[], array []::bigint[])
`

func (q *Queries) CreateEmptyDatasetData(ctx context.Context, datasetID int64) error {
	_, err := q.db.Exec(ctx, createEmptyDatasetData, datasetID)
	return err
}

const getDatasetChunkBorders = `-- name: GetDatasetChunkBorders :one
SELECT min_row_number, max_row_number
from datasets_data
WHERE dataset_id = $1
`

type GetDatasetChunkBordersRow struct {
	MinRowNumber []int64
	MaxRowNumber []int64
}

func (q *Queries) GetDatasetChunkBorders(ctx context.Context, datasetID int64) (GetDatasetChunkBordersRow, error) {
	row := q.db.QueryRow(ctx, getDatasetChunkBorders, datasetID)
	var i GetDatasetChunkBordersRow
	err := row.Scan(&i.MinRowNumber, &i.MaxRowNumber)
	return i, err
}

const getDatasetChunks = `-- name: GetDatasetChunks :many
select UNNEST(raw_data_chunks[indexes.l : indexes.r]) as chunks
from (select $2::int as l, $3::int as r) as indexes
         join datasets_data d on d.dataset_id = $1
`

type GetDatasetChunksParams struct {
	DatasetID int64
	Column2   int32 // TODO: rename
	Column3   int32
}

func (q *Queries) GetDatasetChunks(ctx context.Context, arg GetDatasetChunksParams) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getDatasetChunks, arg.DatasetID, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var chunks []byte
		if err := rows.Scan(&chunks); err != nil {
			return nil, err
		}
		items = append(items, chunks)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uploadDatasetChunks = `-- name: UploadDatasetChunks :exec
UPDATE datasets_data
set raw_data_chunks = raw_data_chunks || $2::bytea[],
    min_row_number = min_row_number || $3::bigint[],
    max_row_number = max_row_number || $4::bigint[]
where dataset_id = $1
`

type UploadDatasetChunksParams struct {
	DatasetID int64
	Column2   [][]byte
	Column3   []int64
	Column4   []int64
}

func (q *Queries) UploadDatasetChunks(ctx context.Context, arg UploadDatasetChunksParams) error {
	_, err := q.db.Exec(ctx, uploadDatasetChunks,
		arg.DatasetID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}
