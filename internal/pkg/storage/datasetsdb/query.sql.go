// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package datasetsdb

import (
	"context"
)

const deleteDatasetData = `-- name: DeleteDatasetData :exec
DELETE
from datasets_data
where dataset_id = $1
`

func (q *Queries) DeleteDatasetData(ctx context.Context, datasetID int64) error {
	_, err := q.db.Exec(ctx, deleteDatasetData, datasetID)
	return err
}

const getDatasetChunkBorders = `-- name: GetDatasetChunkBorders :one
SELECT array_agg(min_row_number) as min_row_number, array_agg(max_row_number) as max_row_number
from datasets_data
WHERE dataset_id = $1
GROUP BY dataset_id
`

type GetDatasetChunkBordersRow struct {
	MinRowNumber []int64
	MaxRowNumber []int64
}

func (q *Queries) GetDatasetChunkBorders(ctx context.Context, datasetID int64) (GetDatasetChunkBordersRow, error) {
	row := q.db.QueryRow(ctx, getDatasetChunkBorders, datasetID)
	var i GetDatasetChunkBordersRow
	err := row.Scan(&i.MinRowNumber, &i.MaxRowNumber)
	return i, err
}

const getDatasetChunks = `-- name: GetDatasetChunks :many
select raw_data_chunk,min_row_number,max_row_number, prefix_len
from datasets_data
where dataset_id = $1
  and $2 <= chunk_number
  and chunk_number < $3
`

type GetDatasetChunksParams struct {
	DatasetID int64
	L         int64
	R         int64
}

type GetDatasetChunksRow struct {
	RawDataChunk []byte
	MinRowNumber int64
	MaxRowNumber int64
	PrefixLen    int32
}

func (q *Queries) GetDatasetChunks(ctx context.Context, arg GetDatasetChunksParams) ([]GetDatasetChunksRow, error) {
	rows, err := q.db.Query(ctx, getDatasetChunks, arg.DatasetID, arg.L, arg.R)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDatasetChunksRow
	for rows.Next() {
		var i GetDatasetChunksRow
		if err := rows.Scan(
			&i.RawDataChunk,
			&i.MinRowNumber,
			&i.MaxRowNumber,
			&i.PrefixLen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uploadDatasetChunk = `-- name: UploadDatasetChunk :exec
INSERT into datasets_data (dataset_id, raw_data_chunk, min_row_number, max_row_number, chunk_number, prefix_len)
VALUES ($1, $2, $3, $4, $5, $6)
`

type UploadDatasetChunkParams struct {
	DatasetID    int64
	RawDataChunk []byte
	MinRowNumber int64
	MaxRowNumber int64
	ChunkNumber  int64
	PrefixLen    int32
}

func (q *Queries) UploadDatasetChunk(ctx context.Context, arg UploadDatasetChunkParams) error {
	_, err := q.db.Exec(ctx, uploadDatasetChunk,
		arg.DatasetID,
		arg.RawDataChunk,
		arg.MinRowNumber,
		arg.MaxRowNumber,
		arg.ChunkNumber,
		arg.PrefixLen,
	)
	return err
}
