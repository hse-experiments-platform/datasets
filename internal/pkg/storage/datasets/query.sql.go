// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package datasets

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDatasetData = `-- name: DeleteDatasetData :exec
DELETE
from datasets_data
where dataset_id = $1
`

func (q *Queries) DeleteDatasetData(ctx context.Context, datasetID int64) error {
	_, err := q.db.Exec(ctx, deleteDatasetData, datasetID)
	return err
}

const deleteOldDatasetData = `-- name: DeleteOldDatasetData :exec
DELETE
from datasets_data
where dataset_id = $1
  and chunk_number >= $2
`

type DeleteOldDatasetDataParams struct {
	DatasetID   int64
	ChunkNumber int64
}

func (q *Queries) DeleteOldDatasetData(ctx context.Context, arg DeleteOldDatasetDataParams) error {
	_, err := q.db.Exec(ctx, deleteOldDatasetData, arg.DatasetID, arg.ChunkNumber)
	return err
}

const getDatasetChunkBorders = `-- name: GetDatasetChunkBorders :many
SELECT min_row_number                                                                  as min_row_number,
       max_row_number                                                                  as max_row_number,
       chunk_len                                                                       as chunk_len,
       prefix_len                                                                      as prefix_len,
       coalesce(sum(chunk_len) over (rows unbounded preceding EXCLUDE CURRENT ROW), 0::bigint) as "offset"
from datasets_data
WHERE dataset_id = $1
`

type GetDatasetChunkBordersRow struct {
	MinRowNumber int64
	MaxRowNumber int64
	ChunkLen     int32
	PrefixLen    int32
	Offset       pgtype.Int8
}

func (q *Queries) GetDatasetChunkBorders(ctx context.Context, datasetID int64) ([]GetDatasetChunkBordersRow, error) {
	rows, err := q.db.Query(ctx, getDatasetChunkBorders, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDatasetChunkBordersRow
	for rows.Next() {
		var i GetDatasetChunkBordersRow
		if err := rows.Scan(
			&i.MinRowNumber,
			&i.MaxRowNumber,
			&i.ChunkLen,
			&i.PrefixLen,
			&i.Offset,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uploadDatasetChunk = `-- name: UploadDatasetChunk :exec
INSERT into datasets_data (dataset_id, min_row_number, max_row_number, chunk_number, prefix_len, chunk_len)
VALUES ($1, $2, $3, $4, $5, $6)
on conflict (dataset_id, chunk_number) do update
    set min_row_number = excluded.min_row_number,
        max_row_number = excluded.max_row_number,
        prefix_len     = excluded.prefix_len,
        chunk_len      =excluded.chunk_len
`

type UploadDatasetChunkParams struct {
	DatasetID    int64
	MinRowNumber int64
	MaxRowNumber int64
	ChunkNumber  int64
	PrefixLen    int32
	ChunkLen     int32
}

func (q *Queries) UploadDatasetChunk(ctx context.Context, arg UploadDatasetChunkParams) error {
	_, err := q.db.Exec(ctx, uploadDatasetChunk,
		arg.DatasetID,
		arg.MinRowNumber,
		arg.MaxRowNumber,
		arg.ChunkNumber,
		arg.PrefixLen,
		arg.ChunkLen,
	)
	return err
}
