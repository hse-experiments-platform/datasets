// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: datasets/datasets.proto

package datasets

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatasetStatus int32

const (
	DatasetStatus_Unknown                DatasetStatus = 0
	DatasetStatus_Initializing           DatasetStatus = 1
	DatasetStatus_Loading                DatasetStatus = 2
	DatasetStatus_LoadingError           DatasetStatus = 3
	DatasetStatus_WaitsConvertation      DatasetStatus = 4
	DatasetStatus_ConvertationInProgress DatasetStatus = 5
	DatasetStatus_ConvertationError      DatasetStatus = 6
	DatasetStatus_Ready                  DatasetStatus = 7
)

// Enum value maps for DatasetStatus.
var (
	DatasetStatus_name = map[int32]string{
		0: "Unknown",
		1: "Initializing",
		2: "Loading",
		3: "LoadingError",
		4: "WaitsConvertation",
		5: "ConvertationInProgress",
		6: "ConvertationError",
		7: "Ready",
	}
	DatasetStatus_value = map[string]int32{
		"Unknown":                0,
		"Initializing":           1,
		"Loading":                2,
		"LoadingError":           3,
		"WaitsConvertation":      4,
		"ConvertationInProgress": 5,
		"ConvertationError":      6,
		"Ready":                  7,
	}
)

func (x DatasetStatus) Enum() *DatasetStatus {
	p := new(DatasetStatus)
	*p = x
	return p
}

func (x DatasetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_datasets_proto_enumTypes[0].Descriptor()
}

func (DatasetStatus) Type() protoreflect.EnumType {
	return &file_datasets_datasets_proto_enumTypes[0]
}

func (x DatasetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetStatus.Descriptor instead.
func (DatasetStatus) EnumDescriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{0}
}

type ColumnType int32

const (
	ColumnType_ColumnTypeUndefined  ColumnType = 0
	ColumnType_ColumnTypeInteger    ColumnType = 1
	ColumnType_ColumnTypeFloat      ColumnType = 2
	ColumnType_ColumnTypeCategorial ColumnType = 3
	ColumnType_ColumnTypeDropped    ColumnType = 4
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0: "ColumnTypeUndefined",
		1: "ColumnTypeInteger",
		2: "ColumnTypeFloat",
		3: "ColumnTypeCategorial",
		4: "ColumnTypeDropped",
	}
	ColumnType_value = map[string]int32{
		"ColumnTypeUndefined":  0,
		"ColumnTypeInteger":    1,
		"ColumnTypeFloat":      2,
		"ColumnTypeCategorial": 3,
		"ColumnTypeDropped":    4,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_datasets_proto_enumTypes[1].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_datasets_datasets_proto_enumTypes[1]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{1}
}

type FillingTechnique int32

const (
	FillingTechnique_FillingTechniqueUndefined         FillingTechnique = 0
	FillingTechnique_FillingTechniqueConstant          FillingTechnique = 1
	FillingTechnique_FillingTechniqueTypeDefault       FillingTechnique = 2
	FillingTechnique_FillingTechniqueAggregateFunction FillingTechnique = 3
	FillingTechnique_FillingTechniqueDeleteRow         FillingTechnique = 4
)

// Enum value maps for FillingTechnique.
var (
	FillingTechnique_name = map[int32]string{
		0: "FillingTechniqueUndefined",
		1: "FillingTechniqueConstant",
		2: "FillingTechniqueTypeDefault",
		3: "FillingTechniqueAggregateFunction",
		4: "FillingTechniqueDeleteRow",
	}
	FillingTechnique_value = map[string]int32{
		"FillingTechniqueUndefined":         0,
		"FillingTechniqueConstant":          1,
		"FillingTechniqueTypeDefault":       2,
		"FillingTechniqueAggregateFunction": 3,
		"FillingTechniqueDeleteRow":         4,
	}
)

func (x FillingTechnique) Enum() *FillingTechnique {
	p := new(FillingTechnique)
	*p = x
	return p
}

func (x FillingTechnique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FillingTechnique) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_datasets_proto_enumTypes[2].Descriptor()
}

func (FillingTechnique) Type() protoreflect.EnumType {
	return &file_datasets_datasets_proto_enumTypes[2]
}

func (x FillingTechnique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FillingTechnique.Descriptor instead.
func (FillingTechnique) EnumDescriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{2}
}

type AggregateFunction int32

const (
	AggregateFunction_AggregateFunctionUndefined    AggregateFunction = 0
	AggregateFunction_AggregateFunctionMean         AggregateFunction = 1
	AggregateFunction_AggregateFunctionMedian       AggregateFunction = 2
	AggregateFunction_AggregateFunctionMin          AggregateFunction = 3
	AggregateFunction_AggregateFunctionMax          AggregateFunction = 4
	AggregateFunction_AggregateFunctionMostFrequent AggregateFunction = 5
)

// Enum value maps for AggregateFunction.
var (
	AggregateFunction_name = map[int32]string{
		0: "AggregateFunctionUndefined",
		1: "AggregateFunctionMean",
		2: "AggregateFunctionMedian",
		3: "AggregateFunctionMin",
		4: "AggregateFunctionMax",
		5: "AggregateFunctionMostFrequent",
	}
	AggregateFunction_value = map[string]int32{
		"AggregateFunctionUndefined":    0,
		"AggregateFunctionMean":         1,
		"AggregateFunctionMedian":       2,
		"AggregateFunctionMin":          3,
		"AggregateFunctionMax":          4,
		"AggregateFunctionMostFrequent": 5,
	}
)

func (x AggregateFunction) Enum() *AggregateFunction {
	p := new(AggregateFunction)
	*p = x
	return p
}

func (x AggregateFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregateFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_datasets_proto_enumTypes[3].Descriptor()
}

func (AggregateFunction) Type() protoreflect.EnumType {
	return &file_datasets_datasets_proto_enumTypes[3]
}

func (x AggregateFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregateFunction.Descriptor instead.
func (AggregateFunction) EnumDescriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{3}
}

type ScalingTechnique int32

const (
	ScalingTechnique_ScalingTechniqueUndefined       ScalingTechnique = 0
	ScalingTechnique_ScalingTechniqueNormalization   ScalingTechnique = 1
	ScalingTechnique_ScalingTechniqueStandardization ScalingTechnique = 2
)

// Enum value maps for ScalingTechnique.
var (
	ScalingTechnique_name = map[int32]string{
		0: "ScalingTechniqueUndefined",
		1: "ScalingTechniqueNormalization",
		2: "ScalingTechniqueStandardization",
	}
	ScalingTechnique_value = map[string]int32{
		"ScalingTechniqueUndefined":       0,
		"ScalingTechniqueNormalization":   1,
		"ScalingTechniqueStandardization": 2,
	}
)

func (x ScalingTechnique) Enum() *ScalingTechnique {
	p := new(ScalingTechnique)
	*p = x
	return p
}

func (x ScalingTechnique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalingTechnique) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_datasets_proto_enumTypes[4].Descriptor()
}

func (ScalingTechnique) Type() protoreflect.EnumType {
	return &file_datasets_datasets_proto_enumTypes[4]
}

func (x ScalingTechnique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalingTechnique.Descriptor instead.
func (ScalingTechnique) EnumDescriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{4}
}

type EncodingTechnique int32

const (
	EncodingTechnique_EncodingTechniqueUndefined      EncodingTechnique = 0
	EncodingTechnique_EncodingTechniqueOneHotEncoding EncodingTechnique = 1
	EncodingTechnique_EncodingTechniqueLabelEncoding  EncodingTechnique = 2
)

// Enum value maps for EncodingTechnique.
var (
	EncodingTechnique_name = map[int32]string{
		0: "EncodingTechniqueUndefined",
		1: "EncodingTechniqueOneHotEncoding",
		2: "EncodingTechniqueLabelEncoding",
	}
	EncodingTechnique_value = map[string]int32{
		"EncodingTechniqueUndefined":      0,
		"EncodingTechniqueOneHotEncoding": 1,
		"EncodingTechniqueLabelEncoding":  2,
	}
)

func (x EncodingTechnique) Enum() *EncodingTechnique {
	p := new(EncodingTechnique)
	*p = x
	return p
}

func (x EncodingTechnique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingTechnique) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_datasets_proto_enumTypes[5].Descriptor()
}

func (EncodingTechnique) Type() protoreflect.EnumType {
	return &file_datasets_datasets_proto_enumTypes[5]
}

func (x EncodingTechnique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingTechnique.Descriptor instead.
func (EncodingTechnique) EnumDescriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{5}
}

type OutlinesDetectingMode int32

const (
	OutlinesDetectingMode_OutlinesDetectingModeUnknown                 OutlinesDetectingMode = 0
	OutlinesDetectingMode_OutlinesDetectingModeNone                    OutlinesDetectingMode = 1
	OutlinesDetectingMode_OutlinesDetectingModeUnknownMinMaxThresholds OutlinesDetectingMode = 2
	OutlinesDetectingMode_OutlinesDetectingModeUnknownIQRMethod        OutlinesDetectingMode = 3
)

// Enum value maps for OutlinesDetectingMode.
var (
	OutlinesDetectingMode_name = map[int32]string{
		0: "OutlinesDetectingModeUnknown",
		1: "OutlinesDetectingModeNone",
		2: "OutlinesDetectingModeUnknownMinMaxThresholds",
		3: "OutlinesDetectingModeUnknownIQRMethod",
	}
	OutlinesDetectingMode_value = map[string]int32{
		"OutlinesDetectingModeUnknown":                 0,
		"OutlinesDetectingModeNone":                    1,
		"OutlinesDetectingModeUnknownMinMaxThresholds": 2,
		"OutlinesDetectingModeUnknownIQRMethod":        3,
	}
)

func (x OutlinesDetectingMode) Enum() *OutlinesDetectingMode {
	p := new(OutlinesDetectingMode)
	*p = x
	return p
}

func (x OutlinesDetectingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutlinesDetectingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_datasets_datasets_proto_enumTypes[6].Descriptor()
}

func (OutlinesDetectingMode) Type() protoreflect.EnumType {
	return &file_datasets_datasets_proto_enumTypes[6]
}

func (x OutlinesDetectingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutlinesDetectingMode.Descriptor instead.
func (OutlinesDetectingMode) EnumDescriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{6}
}

type CreateDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateDatasetRequest) Reset() {
	*x = CreateDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatasetRequest) ProtoMessage() {}

func (x *CreateDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatasetRequest.ProtoReflect.Descriptor instead.
func (*CreateDatasetRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDatasetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID int64 `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
}

func (x *CreateDatasetResponse) Reset() {
	*x = CreateDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatasetResponse) ProtoMessage() {}

func (x *CreateDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatasetResponse.ProtoReflect.Descriptor instead.
func (*CreateDatasetResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDatasetResponse) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

type UploadDatasetByLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID int64  `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UploadDatasetByLinkRequest) Reset() {
	*x = UploadDatasetByLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDatasetByLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDatasetByLinkRequest) ProtoMessage() {}

func (x *UploadDatasetByLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDatasetByLinkRequest.ProtoReflect.Descriptor instead.
func (*UploadDatasetByLinkRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{2}
}

func (x *UploadDatasetByLinkRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *UploadDatasetByLinkRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UploadDatasetByLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadDatasetByLinkResponse) Reset() {
	*x = UploadDatasetByLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDatasetByLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDatasetByLinkResponse) ProtoMessage() {}

func (x *UploadDatasetByLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDatasetByLinkResponse.ProtoReflect.Descriptor instead.
func (*UploadDatasetByLinkResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{3}
}

type GetDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    uint64               `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   uint64               `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Query    string               `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Statuses *DatasetStatusFilter `protobuf:"bytes,4,opt,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *GetDatasetsRequest) Reset() {
	*x = GetDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetsRequest) ProtoMessage() {}

func (x *GetDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetsRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{4}
}

func (x *GetDatasetsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDatasetsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDatasetsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetDatasetsRequest) GetStatuses() *DatasetStatusFilter {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ShortDatasetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Status  DatasetStatus `protobuf:"varint,4,opt,name=status,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.DatasetStatus" json:"status,omitempty"`
}

func (x *ShortDatasetInfo) Reset() {
	*x = ShortDatasetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortDatasetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortDatasetInfo) ProtoMessage() {}

func (x *ShortDatasetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortDatasetInfo.ProtoReflect.Descriptor instead.
func (*ShortDatasetInfo) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{5}
}

func (x *ShortDatasetInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShortDatasetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortDatasetInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ShortDatasetInfo) GetStatus() DatasetStatus {
	if x != nil {
		return x.Status
	}
	return DatasetStatus_Unknown
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{6}
}

func (x *PageInfo) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PageInfo) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PageInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetDatasetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasets []*ShortDatasetInfo `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
	PageInfo *PageInfo           `protobuf:"bytes,2,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
}

func (x *GetDatasetsResponse) Reset() {
	*x = GetDatasetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetsResponse) ProtoMessage() {}

func (x *GetDatasetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetsResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetsResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{7}
}

func (x *GetDatasetsResponse) GetDatasets() []*ShortDatasetInfo {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *GetDatasetsResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type DatasetStatusFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeUnknown                bool `protobuf:"varint,1,opt,name=includeUnknown,proto3" json:"includeUnknown,omitempty"`
	IncludeInitializing           bool `protobuf:"varint,2,opt,name=includeInitializing,proto3" json:"includeInitializing,omitempty"`
	IncludeLoading                bool `protobuf:"varint,3,opt,name=includeLoading,proto3" json:"includeLoading,omitempty"`
	IncludeLoadingError           bool `protobuf:"varint,4,opt,name=includeLoadingError,proto3" json:"includeLoadingError,omitempty"`
	IncludeWaitsConvertation      bool `protobuf:"varint,5,opt,name=includeWaitsConvertation,proto3" json:"includeWaitsConvertation,omitempty"`
	IncludeConvertationInProgress bool `protobuf:"varint,6,opt,name=includeConvertationInProgress,proto3" json:"includeConvertationInProgress,omitempty"`
	IncludeConvertationError      bool `protobuf:"varint,7,opt,name=includeConvertationError,proto3" json:"includeConvertationError,omitempty"`
	IncludeReady                  bool `protobuf:"varint,8,opt,name=includeReady,proto3" json:"includeReady,omitempty"`
}

func (x *DatasetStatusFilter) Reset() {
	*x = DatasetStatusFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetStatusFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetStatusFilter) ProtoMessage() {}

func (x *DatasetStatusFilter) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetStatusFilter.ProtoReflect.Descriptor instead.
func (*DatasetStatusFilter) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{8}
}

func (x *DatasetStatusFilter) GetIncludeUnknown() bool {
	if x != nil {
		return x.IncludeUnknown
	}
	return false
}

func (x *DatasetStatusFilter) GetIncludeInitializing() bool {
	if x != nil {
		return x.IncludeInitializing
	}
	return false
}

func (x *DatasetStatusFilter) GetIncludeLoading() bool {
	if x != nil {
		return x.IncludeLoading
	}
	return false
}

func (x *DatasetStatusFilter) GetIncludeLoadingError() bool {
	if x != nil {
		return x.IncludeLoadingError
	}
	return false
}

func (x *DatasetStatusFilter) GetIncludeWaitsConvertation() bool {
	if x != nil {
		return x.IncludeWaitsConvertation
	}
	return false
}

func (x *DatasetStatusFilter) GetIncludeConvertationInProgress() bool {
	if x != nil {
		return x.IncludeConvertationInProgress
	}
	return false
}

func (x *DatasetStatusFilter) GetIncludeConvertationError() bool {
	if x != nil {
		return x.IncludeConvertationError
	}
	return false
}

func (x *DatasetStatusFilter) GetIncludeReady() bool {
	if x != nil {
		return x.IncludeReady
	}
	return false
}

type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID int64 `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{9}
}

func (x *GetDatasetRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version     string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Status      DatasetStatus          `protobuf:"varint,4,opt,name=status,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.DatasetStatus" json:"status,omitempty"`
	RowsCount   uint64                 `protobuf:"varint,5,opt,name=rowsCount,proto3" json:"rowsCount,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UploadError string                 `protobuf:"bytes,8,opt,name=uploadError,proto3" json:"uploadError,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{10}
}

func (x *Dataset) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataset) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Dataset) GetStatus() DatasetStatus {
	if x != nil {
		return x.Status
	}
	return DatasetStatus_Unknown
}

func (x *Dataset) GetRowsCount() uint64 {
	if x != nil {
		return x.RowsCount
	}
	return 0
}

func (x *Dataset) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Dataset) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Dataset) GetUploadError() string {
	if x != nil {
		return x.UploadError
	}
	return ""
}

type GetDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset *Dataset       `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Schema  *DatasetSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GetDatasetResponse) Reset() {
	*x = GetDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetResponse) ProtoMessage() {}

func (x *GetDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{11}
}

func (x *GetDatasetResponse) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *GetDatasetResponse) GetSchema() *DatasetSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type GetDatasetRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID int64  `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	Limit     uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetDatasetRowsRequest) Reset() {
	*x = GetDatasetRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRowsRequest) ProtoMessage() {}

func (x *GetDatasetRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRowsRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRowsRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{12}
}

func (x *GetDatasetRowsRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *GetDatasetRowsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDatasetRowsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type DatasetRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowNumber uint64            `protobuf:"varint,1,opt,name=rowNumber,proto3" json:"rowNumber,omitempty"`
	Columns   []*structpb.Value `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DatasetRow) Reset() {
	*x = DatasetRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetRow) ProtoMessage() {}

func (x *DatasetRow) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetRow.ProtoReflect.Descriptor instead.
func (*DatasetRow) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{13}
}

func (x *DatasetRow) GetRowNumber() uint64 {
	if x != nil {
		return x.RowNumber
	}
	return 0
}

func (x *DatasetRow) GetColumns() []*structpb.Value {
	if x != nil {
		return x.Columns
	}
	return nil
}

type DatasetSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*DatasetSchema_SchemaColumn `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DatasetSchema) Reset() {
	*x = DatasetSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSchema) ProtoMessage() {}

func (x *DatasetSchema) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSchema.ProtoReflect.Descriptor instead.
func (*DatasetSchema) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{14}
}

func (x *DatasetSchema) GetColumns() []*DatasetSchema_SchemaColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type GetDatasetRowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows     []*DatasetRow `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	PageInfo *PageInfo     `protobuf:"bytes,3,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
}

func (x *GetDatasetRowsResponse) Reset() {
	*x = GetDatasetRowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRowsResponse) ProtoMessage() {}

func (x *GetDatasetRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRowsResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetRowsResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{15}
}

func (x *GetDatasetRowsResponse) GetRows() []*DatasetRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetDatasetRowsResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type EmptiesStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Technique         FillingTechnique  `protobuf:"varint,2,opt,name=technique,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.FillingTechnique" json:"technique,omitempty"`
	AggregateFunction AggregateFunction `protobuf:"varint,3,opt,name=aggregateFunction,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.AggregateFunction" json:"aggregateFunction,omitempty"`
	ConstantValue     string            `protobuf:"bytes,4,opt,name=constantValue,proto3" json:"constantValue,omitempty"`
}

func (x *EmptiesStrategy) Reset() {
	*x = EmptiesStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptiesStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptiesStrategy) ProtoMessage() {}

func (x *EmptiesStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptiesStrategy.ProtoReflect.Descriptor instead.
func (*EmptiesStrategy) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{16}
}

func (x *EmptiesStrategy) GetTechnique() FillingTechnique {
	if x != nil {
		return x.Technique
	}
	return FillingTechnique_FillingTechniqueUndefined
}

func (x *EmptiesStrategy) GetAggregateFunction() AggregateFunction {
	if x != nil {
		return x.AggregateFunction
	}
	return AggregateFunction_AggregateFunctionUndefined
}

func (x *EmptiesStrategy) GetConstantValue() string {
	if x != nil {
		return x.ConstantValue
	}
	return ""
}

type SetTypeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnType      ColumnType       `protobuf:"varint,1,opt,name=columnType,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.ColumnType" json:"columnType,omitempty"`
	EmptiesStrategy *EmptiesStrategy `protobuf:"bytes,2,opt,name=emptiesStrategy,proto3" json:"emptiesStrategy,omitempty"`
}

func (x *SetTypeSettings) Reset() {
	*x = SetTypeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTypeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTypeSettings) ProtoMessage() {}

func (x *SetTypeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTypeSettings.ProtoReflect.Descriptor instead.
func (*SetTypeSettings) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{17}
}

func (x *SetTypeSettings) GetColumnType() ColumnType {
	if x != nil {
		return x.ColumnType
	}
	return ColumnType_ColumnTypeUndefined
}

func (x *SetTypeSettings) GetEmptiesStrategy() *EmptiesStrategy {
	if x != nil {
		return x.EmptiesStrategy
	}
	return nil
}

type SetDatasetColumnTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID   int64                       `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	ColumnTypes map[string]*SetTypeSettings `protobuf:"bytes,2,rep,name=columnTypes,proto3" json:"columnTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetDatasetColumnTypesRequest) Reset() {
	*x = SetDatasetColumnTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetColumnTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetColumnTypesRequest) ProtoMessage() {}

func (x *SetDatasetColumnTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetColumnTypesRequest.ProtoReflect.Descriptor instead.
func (*SetDatasetColumnTypesRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{18}
}

func (x *SetDatasetColumnTypesRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *SetDatasetColumnTypesRequest) GetColumnTypes() map[string]*SetTypeSettings {
	if x != nil {
		return x.ColumnTypes
	}
	return nil
}

type SetDatasetColumnTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDatasetColumnTypesResponse) Reset() {
	*x = SetDatasetColumnTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDatasetColumnTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDatasetColumnTypesResponse) ProtoMessage() {}

func (x *SetDatasetColumnTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDatasetColumnTypesResponse.ProtoReflect.Descriptor instead.
func (*SetDatasetColumnTypesResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{19}
}

type GetDatasetDownloadLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID int64 `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
}

func (x *GetDatasetDownloadLinkRequest) Reset() {
	*x = GetDatasetDownloadLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetDownloadLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetDownloadLinkRequest) ProtoMessage() {}

func (x *GetDatasetDownloadLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetDownloadLinkRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetDownloadLinkRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{20}
}

func (x *GetDatasetDownloadLinkRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

type GetDatasetDownloadLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	UserID int64  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetDatasetDownloadLinkResponse) Reset() {
	*x = GetDatasetDownloadLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetDownloadLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetDownloadLinkResponse) ProtoMessage() {}

func (x *GetDatasetDownloadLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetDownloadLinkResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetDownloadLinkResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{21}
}

func (x *GetDatasetDownloadLinkResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetDatasetDownloadLinkResponse) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type TransformEmptiesStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FillingTechnique  FillingTechnique  `protobuf:"varint,1,opt,name=fillingTechnique,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.FillingTechnique" json:"fillingTechnique,omitempty"`
	AggregateFunction AggregateFunction `protobuf:"varint,2,opt,name=aggregateFunction,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.AggregateFunction" json:"aggregateFunction,omitempty"`
	FillingValue      string            `protobuf:"bytes,3,opt,name=fillingValue,proto3" json:"fillingValue,omitempty"`
}

func (x *TransformEmptiesStrategy) Reset() {
	*x = TransformEmptiesStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformEmptiesStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformEmptiesStrategy) ProtoMessage() {}

func (x *TransformEmptiesStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformEmptiesStrategy.ProtoReflect.Descriptor instead.
func (*TransformEmptiesStrategy) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{22}
}

func (x *TransformEmptiesStrategy) GetFillingTechnique() FillingTechnique {
	if x != nil {
		return x.FillingTechnique
	}
	return FillingTechnique_FillingTechniqueUndefined
}

func (x *TransformEmptiesStrategy) GetAggregateFunction() AggregateFunction {
	if x != nil {
		return x.AggregateFunction
	}
	return AggregateFunction_AggregateFunctionUndefined
}

func (x *TransformEmptiesStrategy) GetFillingValue() string {
	if x != nil {
		return x.FillingValue
	}
	return ""
}

type OutlinersDetectingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode OutlinesDetectingMode `protobuf:"varint,1,opt,name=mode,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.OutlinesDetectingMode" json:"mode,omitempty"`
	Min  float64               `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	Max  float64               `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *OutlinersDetectingStrategy) Reset() {
	*x = OutlinersDetectingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutlinersDetectingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlinersDetectingStrategy) ProtoMessage() {}

func (x *OutlinersDetectingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlinersDetectingStrategy.ProtoReflect.Descriptor instead.
func (*OutlinersDetectingStrategy) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{23}
}

func (x *OutlinersDetectingStrategy) GetMode() OutlinesDetectingMode {
	if x != nil {
		return x.Mode
	}
	return OutlinesDetectingMode_OutlinesDetectingModeUnknown
}

func (x *OutlinersDetectingStrategy) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *OutlinersDetectingStrategy) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type OutlinersReplacementStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplacementMode FillingTechnique  `protobuf:"varint,1,opt,name=replacementMode,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.FillingTechnique" json:"replacementMode,omitempty"`
	AggregateValue  AggregateFunction `protobuf:"varint,2,opt,name=aggregateValue,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.AggregateFunction" json:"aggregateValue,omitempty"`
	ConstantValue   string            `protobuf:"bytes,3,opt,name=constantValue,proto3" json:"constantValue,omitempty"`
}

func (x *OutlinersReplacementStrategy) Reset() {
	*x = OutlinersReplacementStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutlinersReplacementStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlinersReplacementStrategy) ProtoMessage() {}

func (x *OutlinersReplacementStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlinersReplacementStrategy.ProtoReflect.Descriptor instead.
func (*OutlinersReplacementStrategy) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{24}
}

func (x *OutlinersReplacementStrategy) GetReplacementMode() FillingTechnique {
	if x != nil {
		return x.ReplacementMode
	}
	return FillingTechnique_FillingTechniqueUndefined
}

func (x *OutlinersReplacementStrategy) GetAggregateValue() AggregateFunction {
	if x != nil {
		return x.AggregateValue
	}
	return AggregateFunction_AggregateFunctionUndefined
}

func (x *OutlinersReplacementStrategy) GetConstantValue() string {
	if x != nil {
		return x.ConstantValue
	}
	return ""
}

type TransformSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScalingTechnique             ScalingTechnique              `protobuf:"varint,1,opt,name=scalingTechnique,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.ScalingTechnique" json:"scalingTechnique,omitempty"`
	EncodingTechnique            EncodingTechnique             `protobuf:"varint,2,opt,name=encodingTechnique,proto3,enum=github.hse_experiments_platform.datasets.api.datasets.EncodingTechnique" json:"encodingTechnique,omitempty"`
	EmptiesStrategy              *TransformEmptiesStrategy     `protobuf:"bytes,3,opt,name=emptiesStrategy,proto3" json:"emptiesStrategy,omitempty"`
	OutlinersDetectingStrategy   *OutlinersDetectingStrategy   `protobuf:"bytes,4,opt,name=outlinersDetectingStrategy,proto3" json:"outlinersDetectingStrategy,omitempty"`
	OutlinersReplacementStrategy *OutlinersReplacementStrategy `protobuf:"bytes,5,opt,name=outlinersReplacementStrategy,proto3" json:"outlinersReplacementStrategy,omitempty"`
}

func (x *TransformSettings) Reset() {
	*x = TransformSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformSettings) ProtoMessage() {}

func (x *TransformSettings) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformSettings.ProtoReflect.Descriptor instead.
func (*TransformSettings) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{25}
}

func (x *TransformSettings) GetScalingTechnique() ScalingTechnique {
	if x != nil {
		return x.ScalingTechnique
	}
	return ScalingTechnique_ScalingTechniqueUndefined
}

func (x *TransformSettings) GetEncodingTechnique() EncodingTechnique {
	if x != nil {
		return x.EncodingTechnique
	}
	return EncodingTechnique_EncodingTechniqueUndefined
}

func (x *TransformSettings) GetEmptiesStrategy() *TransformEmptiesStrategy {
	if x != nil {
		return x.EmptiesStrategy
	}
	return nil
}

func (x *TransformSettings) GetOutlinersDetectingStrategy() *OutlinersDetectingStrategy {
	if x != nil {
		return x.OutlinersDetectingStrategy
	}
	return nil
}

func (x *TransformSettings) GetOutlinersReplacementStrategy() *OutlinersReplacementStrategy {
	if x != nil {
		return x.OutlinersReplacementStrategy
	}
	return nil
}

type TransformDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID                int64                         `protobuf:"varint,2,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	ColumnPreprocessSettings map[string]*TransformSettings `protobuf:"bytes,3,rep,name=columnPreprocessSettings,proto3" json:"columnPreprocessSettings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TransformDatasetRequest) Reset() {
	*x = TransformDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformDatasetRequest) ProtoMessage() {}

func (x *TransformDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformDatasetRequest.ProtoReflect.Descriptor instead.
func (*TransformDatasetRequest) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{26}
}

func (x *TransformDatasetRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *TransformDatasetRequest) GetColumnPreprocessSettings() map[string]*TransformSettings {
	if x != nil {
		return x.ColumnPreprocessSettings
	}
	return nil
}

type TransformDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDatasetID int64 `protobuf:"varint,2,opt,name=new_datasetID,json=newDatasetID,proto3" json:"new_datasetID,omitempty"`
}

func (x *TransformDatasetResponse) Reset() {
	*x = TransformDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformDatasetResponse) ProtoMessage() {}

func (x *TransformDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformDatasetResponse.ProtoReflect.Descriptor instead.
func (*TransformDatasetResponse) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{27}
}

func (x *TransformDatasetResponse) GetNewDatasetID() int64 {
	if x != nil {
		return x.NewDatasetID
	}
	return 0
}

type DatasetSchema_SchemaColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DatasetSchema_SchemaColumn) Reset() {
	*x = DatasetSchema_SchemaColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datasets_datasets_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetSchema_SchemaColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSchema_SchemaColumn) ProtoMessage() {}

func (x *DatasetSchema_SchemaColumn) ProtoReflect() protoreflect.Message {
	mi := &file_datasets_datasets_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSchema_SchemaColumn.ProtoReflect.Descriptor instead.
func (*DatasetSchema_SchemaColumn) Descriptor() ([]byte, []int) {
	return file_datasets_datasets_proto_rawDescGZIP(), []int{14, 0}
}

func (x *DatasetSchema_SchemaColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetSchema_SchemaColumn) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_datasets_datasets_proto protoreflect.FileDescriptor

var file_datasets_datasets_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x1a, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x10,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd7, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xab, 0x03, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x61, 0x69,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x61, 0x69,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x22, 0xdb, 0x02, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x22, 0x63, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5c, 0x0a, 0x0a, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x6b, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x36, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcc,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x5b, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x96, 0x02,
	0x0a, 0x0f, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x65, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x09, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a,
	0x0f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0f,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22,
	0xce, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x86,
	0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xab, 0x02, 0x0a,
	0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65,
	0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x73, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x76,
	0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x60, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22,
	0xa9, 0x02, 0x0a, 0x1c, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x71, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x05, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x73, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x11, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x79,
	0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65,
	0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x1a, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x97, 0x01,
	0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x1c, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xfa, 0x02, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0xa8, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x18, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x95, 0x01, 0x0a,
	0x1d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x5e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x2a, 0xa2, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x07, 0x2a, 0x82, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x04, 0x2a,
	0xb6, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x10, 0x04, 0x2a, 0xc2, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x2a, 0x79, 0x0a,
	0x10, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0xb5, 0x01, 0x0a, 0x15, 0x4f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x49, 0x51, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x10, 0x03, 0x32, 0xba,
	0x0f, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x87, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x51, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x49, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xd4, 0x01, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x49, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x7d, 0x12, 0xee, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3f, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x88, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x92, 0x41, 0x13, 0x62, 0x11,
	0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x8a, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x54, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xfc, 0x01, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x4e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x47, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x96, 0x02, 0x92, 0x41,
	0xdb, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x48, 0x53, 0x45, 0x20, 0x4d, 0x4c, 0x4f, 0x70, 0x73, 0x20,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6c, 0x6f, 0x70, 0x73, 0x20, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5a, 0x6a, 0x0a, 0x68, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x59, 0x08, 0x02, 0x12, 0x44, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x60, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x60, 0x20, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x22, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22, 0x1a, 0x0d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x73, 0x65, 0x2d, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x3b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datasets_datasets_proto_rawDescOnce sync.Once
	file_datasets_datasets_proto_rawDescData = file_datasets_datasets_proto_rawDesc
)

func file_datasets_datasets_proto_rawDescGZIP() []byte {
	file_datasets_datasets_proto_rawDescOnce.Do(func() {
		file_datasets_datasets_proto_rawDescData = protoimpl.X.CompressGZIP(file_datasets_datasets_proto_rawDescData)
	})
	return file_datasets_datasets_proto_rawDescData
}

var file_datasets_datasets_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_datasets_datasets_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_datasets_datasets_proto_goTypes = []interface{}{
	(DatasetStatus)(0),                     // 0: github.hse_experiments_platform.datasets.api.datasets.DatasetStatus
	(ColumnType)(0),                        // 1: github.hse_experiments_platform.datasets.api.datasets.ColumnType
	(FillingTechnique)(0),                  // 2: github.hse_experiments_platform.datasets.api.datasets.FillingTechnique
	(AggregateFunction)(0),                 // 3: github.hse_experiments_platform.datasets.api.datasets.AggregateFunction
	(ScalingTechnique)(0),                  // 4: github.hse_experiments_platform.datasets.api.datasets.ScalingTechnique
	(EncodingTechnique)(0),                 // 5: github.hse_experiments_platform.datasets.api.datasets.EncodingTechnique
	(OutlinesDetectingMode)(0),             // 6: github.hse_experiments_platform.datasets.api.datasets.OutlinesDetectingMode
	(*CreateDatasetRequest)(nil),           // 7: github.hse_experiments_platform.datasets.api.datasets.CreateDatasetRequest
	(*CreateDatasetResponse)(nil),          // 8: github.hse_experiments_platform.datasets.api.datasets.CreateDatasetResponse
	(*UploadDatasetByLinkRequest)(nil),     // 9: github.hse_experiments_platform.datasets.api.datasets.UploadDatasetByLinkRequest
	(*UploadDatasetByLinkResponse)(nil),    // 10: github.hse_experiments_platform.datasets.api.datasets.UploadDatasetByLinkResponse
	(*GetDatasetsRequest)(nil),             // 11: github.hse_experiments_platform.datasets.api.datasets.GetDatasetsRequest
	(*ShortDatasetInfo)(nil),               // 12: github.hse_experiments_platform.datasets.api.datasets.ShortDatasetInfo
	(*PageInfo)(nil),                       // 13: github.hse_experiments_platform.datasets.api.datasets.PageInfo
	(*GetDatasetsResponse)(nil),            // 14: github.hse_experiments_platform.datasets.api.datasets.GetDatasetsResponse
	(*DatasetStatusFilter)(nil),            // 15: github.hse_experiments_platform.datasets.api.datasets.DatasetStatusFilter
	(*GetDatasetRequest)(nil),              // 16: github.hse_experiments_platform.datasets.api.datasets.GetDatasetRequest
	(*Dataset)(nil),                        // 17: github.hse_experiments_platform.datasets.api.datasets.Dataset
	(*GetDatasetResponse)(nil),             // 18: github.hse_experiments_platform.datasets.api.datasets.GetDatasetResponse
	(*GetDatasetRowsRequest)(nil),          // 19: github.hse_experiments_platform.datasets.api.datasets.GetDatasetRowsRequest
	(*DatasetRow)(nil),                     // 20: github.hse_experiments_platform.datasets.api.datasets.DatasetRow
	(*DatasetSchema)(nil),                  // 21: github.hse_experiments_platform.datasets.api.datasets.DatasetSchema
	(*GetDatasetRowsResponse)(nil),         // 22: github.hse_experiments_platform.datasets.api.datasets.GetDatasetRowsResponse
	(*EmptiesStrategy)(nil),                // 23: github.hse_experiments_platform.datasets.api.datasets.EmptiesStrategy
	(*SetTypeSettings)(nil),                // 24: github.hse_experiments_platform.datasets.api.datasets.SetTypeSettings
	(*SetDatasetColumnTypesRequest)(nil),   // 25: github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesRequest
	(*SetDatasetColumnTypesResponse)(nil),  // 26: github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesResponse
	(*GetDatasetDownloadLinkRequest)(nil),  // 27: github.hse_experiments_platform.datasets.api.datasets.GetDatasetDownloadLinkRequest
	(*GetDatasetDownloadLinkResponse)(nil), // 28: github.hse_experiments_platform.datasets.api.datasets.GetDatasetDownloadLinkResponse
	(*TransformEmptiesStrategy)(nil),       // 29: github.hse_experiments_platform.datasets.api.datasets.TransformEmptiesStrategy
	(*OutlinersDetectingStrategy)(nil),     // 30: github.hse_experiments_platform.datasets.api.datasets.OutlinersDetectingStrategy
	(*OutlinersReplacementStrategy)(nil),   // 31: github.hse_experiments_platform.datasets.api.datasets.OutlinersReplacementStrategy
	(*TransformSettings)(nil),              // 32: github.hse_experiments_platform.datasets.api.datasets.TransformSettings
	(*TransformDatasetRequest)(nil),        // 33: github.hse_experiments_platform.datasets.api.datasets.TransformDatasetRequest
	(*TransformDatasetResponse)(nil),       // 34: github.hse_experiments_platform.datasets.api.datasets.TransformDatasetResponse
	(*DatasetSchema_SchemaColumn)(nil),     // 35: github.hse_experiments_platform.datasets.api.datasets.DatasetSchema.SchemaColumn
	nil,                                    // 36: github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesRequest.ColumnTypesEntry
	nil,                                    // 37: github.hse_experiments_platform.datasets.api.datasets.TransformDatasetRequest.ColumnPreprocessSettingsEntry
	(*timestamppb.Timestamp)(nil),          // 38: google.protobuf.Timestamp
	(*structpb.Value)(nil),                 // 39: google.protobuf.Value
}
var file_datasets_datasets_proto_depIdxs = []int32{
	15, // 0: github.hse_experiments_platform.datasets.api.datasets.GetDatasetsRequest.statuses:type_name -> github.hse_experiments_platform.datasets.api.datasets.DatasetStatusFilter
	0,  // 1: github.hse_experiments_platform.datasets.api.datasets.ShortDatasetInfo.status:type_name -> github.hse_experiments_platform.datasets.api.datasets.DatasetStatus
	12, // 2: github.hse_experiments_platform.datasets.api.datasets.GetDatasetsResponse.datasets:type_name -> github.hse_experiments_platform.datasets.api.datasets.ShortDatasetInfo
	13, // 3: github.hse_experiments_platform.datasets.api.datasets.GetDatasetsResponse.pageInfo:type_name -> github.hse_experiments_platform.datasets.api.datasets.PageInfo
	0,  // 4: github.hse_experiments_platform.datasets.api.datasets.Dataset.status:type_name -> github.hse_experiments_platform.datasets.api.datasets.DatasetStatus
	38, // 5: github.hse_experiments_platform.datasets.api.datasets.Dataset.created_at:type_name -> google.protobuf.Timestamp
	38, // 6: github.hse_experiments_platform.datasets.api.datasets.Dataset.updated_at:type_name -> google.protobuf.Timestamp
	17, // 7: github.hse_experiments_platform.datasets.api.datasets.GetDatasetResponse.dataset:type_name -> github.hse_experiments_platform.datasets.api.datasets.Dataset
	21, // 8: github.hse_experiments_platform.datasets.api.datasets.GetDatasetResponse.schema:type_name -> github.hse_experiments_platform.datasets.api.datasets.DatasetSchema
	39, // 9: github.hse_experiments_platform.datasets.api.datasets.DatasetRow.columns:type_name -> google.protobuf.Value
	35, // 10: github.hse_experiments_platform.datasets.api.datasets.DatasetSchema.columns:type_name -> github.hse_experiments_platform.datasets.api.datasets.DatasetSchema.SchemaColumn
	20, // 11: github.hse_experiments_platform.datasets.api.datasets.GetDatasetRowsResponse.rows:type_name -> github.hse_experiments_platform.datasets.api.datasets.DatasetRow
	13, // 12: github.hse_experiments_platform.datasets.api.datasets.GetDatasetRowsResponse.pageInfo:type_name -> github.hse_experiments_platform.datasets.api.datasets.PageInfo
	2,  // 13: github.hse_experiments_platform.datasets.api.datasets.EmptiesStrategy.technique:type_name -> github.hse_experiments_platform.datasets.api.datasets.FillingTechnique
	3,  // 14: github.hse_experiments_platform.datasets.api.datasets.EmptiesStrategy.aggregateFunction:type_name -> github.hse_experiments_platform.datasets.api.datasets.AggregateFunction
	1,  // 15: github.hse_experiments_platform.datasets.api.datasets.SetTypeSettings.columnType:type_name -> github.hse_experiments_platform.datasets.api.datasets.ColumnType
	23, // 16: github.hse_experiments_platform.datasets.api.datasets.SetTypeSettings.emptiesStrategy:type_name -> github.hse_experiments_platform.datasets.api.datasets.EmptiesStrategy
	36, // 17: github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesRequest.columnTypes:type_name -> github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesRequest.ColumnTypesEntry
	2,  // 18: github.hse_experiments_platform.datasets.api.datasets.TransformEmptiesStrategy.fillingTechnique:type_name -> github.hse_experiments_platform.datasets.api.datasets.FillingTechnique
	3,  // 19: github.hse_experiments_platform.datasets.api.datasets.TransformEmptiesStrategy.aggregateFunction:type_name -> github.hse_experiments_platform.datasets.api.datasets.AggregateFunction
	6,  // 20: github.hse_experiments_platform.datasets.api.datasets.OutlinersDetectingStrategy.mode:type_name -> github.hse_experiments_platform.datasets.api.datasets.OutlinesDetectingMode
	2,  // 21: github.hse_experiments_platform.datasets.api.datasets.OutlinersReplacementStrategy.replacementMode:type_name -> github.hse_experiments_platform.datasets.api.datasets.FillingTechnique
	3,  // 22: github.hse_experiments_platform.datasets.api.datasets.OutlinersReplacementStrategy.aggregateValue:type_name -> github.hse_experiments_platform.datasets.api.datasets.AggregateFunction
	4,  // 23: github.hse_experiments_platform.datasets.api.datasets.TransformSettings.scalingTechnique:type_name -> github.hse_experiments_platform.datasets.api.datasets.ScalingTechnique
	5,  // 24: github.hse_experiments_platform.datasets.api.datasets.TransformSettings.encodingTechnique:type_name -> github.hse_experiments_platform.datasets.api.datasets.EncodingTechnique
	29, // 25: github.hse_experiments_platform.datasets.api.datasets.TransformSettings.emptiesStrategy:type_name -> github.hse_experiments_platform.datasets.api.datasets.TransformEmptiesStrategy
	30, // 26: github.hse_experiments_platform.datasets.api.datasets.TransformSettings.outlinersDetectingStrategy:type_name -> github.hse_experiments_platform.datasets.api.datasets.OutlinersDetectingStrategy
	31, // 27: github.hse_experiments_platform.datasets.api.datasets.TransformSettings.outlinersReplacementStrategy:type_name -> github.hse_experiments_platform.datasets.api.datasets.OutlinersReplacementStrategy
	37, // 28: github.hse_experiments_platform.datasets.api.datasets.TransformDatasetRequest.columnPreprocessSettings:type_name -> github.hse_experiments_platform.datasets.api.datasets.TransformDatasetRequest.ColumnPreprocessSettingsEntry
	24, // 29: github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesRequest.ColumnTypesEntry.value:type_name -> github.hse_experiments_platform.datasets.api.datasets.SetTypeSettings
	32, // 30: github.hse_experiments_platform.datasets.api.datasets.TransformDatasetRequest.ColumnPreprocessSettingsEntry.value:type_name -> github.hse_experiments_platform.datasets.api.datasets.TransformSettings
	7,  // 31: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.CreateDataset:input_type -> github.hse_experiments_platform.datasets.api.datasets.CreateDatasetRequest
	9,  // 32: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.UploadDatasetByLink:input_type -> github.hse_experiments_platform.datasets.api.datasets.UploadDatasetByLinkRequest
	11, // 33: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDatasets:input_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetsRequest
	16, // 34: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDataset:input_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetRequest
	19, // 35: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDatasetRows:input_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetRowsRequest
	25, // 36: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.SetDatasetColumnTypes:input_type -> github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesRequest
	27, // 37: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDatasetDownloadLink:input_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetDownloadLinkRequest
	33, // 38: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.TransformDataset:input_type -> github.hse_experiments_platform.datasets.api.datasets.TransformDatasetRequest
	8,  // 39: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.CreateDataset:output_type -> github.hse_experiments_platform.datasets.api.datasets.CreateDatasetResponse
	10, // 40: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.UploadDatasetByLink:output_type -> github.hse_experiments_platform.datasets.api.datasets.UploadDatasetByLinkResponse
	14, // 41: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDatasets:output_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetsResponse
	18, // 42: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDataset:output_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetResponse
	22, // 43: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDatasetRows:output_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetRowsResponse
	26, // 44: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.SetDatasetColumnTypes:output_type -> github.hse_experiments_platform.datasets.api.datasets.SetDatasetColumnTypesResponse
	28, // 45: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.GetDatasetDownloadLink:output_type -> github.hse_experiments_platform.datasets.api.datasets.GetDatasetDownloadLinkResponse
	34, // 46: github.hse_experiments_platform.datasets.api.datasets.DatasetsService.TransformDataset:output_type -> github.hse_experiments_platform.datasets.api.datasets.TransformDatasetResponse
	39, // [39:47] is the sub-list for method output_type
	31, // [31:39] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_datasets_datasets_proto_init() }
func file_datasets_datasets_proto_init() {
	if File_datasets_datasets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datasets_datasets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDatasetByLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDatasetByLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortDatasetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetStatusFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptiesStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTypeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetColumnTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDatasetColumnTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetDownloadLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetDownloadLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformEmptiesStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutlinersDetectingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutlinersReplacementStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datasets_datasets_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetSchema_SchemaColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datasets_datasets_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datasets_datasets_proto_goTypes,
		DependencyIndexes: file_datasets_datasets_proto_depIdxs,
		EnumInfos:         file_datasets_datasets_proto_enumTypes,
		MessageInfos:      file_datasets_datasets_proto_msgTypes,
	}.Build()
	File_datasets_datasets_proto = out.File
	file_datasets_datasets_proto_rawDesc = nil
	file_datasets_datasets_proto_goTypes = nil
	file_datasets_datasets_proto_depIdxs = nil
}
