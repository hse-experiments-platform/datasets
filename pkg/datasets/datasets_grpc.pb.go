// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: datasets/datasets.proto

package datasets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatasetsService_CreateDataset_FullMethodName         = "/github.hse_experiments_platform.datasets.api.datasets.DatasetsService/CreateDataset"
	DatasetsService_UploadDatasetByLink_FullMethodName   = "/github.hse_experiments_platform.datasets.api.datasets.DatasetsService/UploadDatasetByLink"
	DatasetsService_GetDatasets_FullMethodName           = "/github.hse_experiments_platform.datasets.api.datasets.DatasetsService/GetDatasets"
	DatasetsService_GetDataset_FullMethodName            = "/github.hse_experiments_platform.datasets.api.datasets.DatasetsService/GetDataset"
	DatasetsService_GetDatasetRows_FullMethodName        = "/github.hse_experiments_platform.datasets.api.datasets.DatasetsService/GetDatasetRows"
	DatasetsService_SetDatasetColumnTypes_FullMethodName = "/github.hse_experiments_platform.datasets.api.datasets.DatasetsService/SetDatasetColumnTypes"
)

// DatasetsServiceClient is the client API for DatasetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetsServiceClient interface {
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
	UploadDatasetByLink(ctx context.Context, in *UploadDatasetByLinkRequest, opts ...grpc.CallOption) (*UploadDatasetByLinkResponse, error)
	GetDatasets(ctx context.Context, in *GetDatasetsRequest, opts ...grpc.CallOption) (*GetDatasetsResponse, error)
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error)
	GetDatasetRows(ctx context.Context, in *GetDatasetRowsRequest, opts ...grpc.CallOption) (*GetDatasetRowsResponse, error)
	SetDatasetColumnTypes(ctx context.Context, in *SetDatasetColumnTypesRequest, opts ...grpc.CallOption) (*SetDatasetColumnTypesResponse, error)
}

type datasetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetsServiceClient(cc grpc.ClientConnInterface) DatasetsServiceClient {
	return &datasetsServiceClient{cc}
}

func (c *datasetsServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	out := new(CreateDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_CreateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) UploadDatasetByLink(ctx context.Context, in *UploadDatasetByLinkRequest, opts ...grpc.CallOption) (*UploadDatasetByLinkResponse, error) {
	out := new(UploadDatasetByLinkResponse)
	err := c.cc.Invoke(ctx, DatasetsService_UploadDatasetByLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) GetDatasets(ctx context.Context, in *GetDatasetsRequest, opts ...grpc.CallOption) (*GetDatasetsResponse, error) {
	out := new(GetDatasetsResponse)
	err := c.cc.Invoke(ctx, DatasetsService_GetDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error) {
	out := new(GetDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_GetDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) GetDatasetRows(ctx context.Context, in *GetDatasetRowsRequest, opts ...grpc.CallOption) (*GetDatasetRowsResponse, error) {
	out := new(GetDatasetRowsResponse)
	err := c.cc.Invoke(ctx, DatasetsService_GetDatasetRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) SetDatasetColumnTypes(ctx context.Context, in *SetDatasetColumnTypesRequest, opts ...grpc.CallOption) (*SetDatasetColumnTypesResponse, error) {
	out := new(SetDatasetColumnTypesResponse)
	err := c.cc.Invoke(ctx, DatasetsService_SetDatasetColumnTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetsServiceServer is the server API for DatasetsService service.
// All implementations should embed UnimplementedDatasetsServiceServer
// for forward compatibility
type DatasetsServiceServer interface {
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
	UploadDatasetByLink(context.Context, *UploadDatasetByLinkRequest) (*UploadDatasetByLinkResponse, error)
	GetDatasets(context.Context, *GetDatasetsRequest) (*GetDatasetsResponse, error)
	GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error)
	GetDatasetRows(context.Context, *GetDatasetRowsRequest) (*GetDatasetRowsResponse, error)
	SetDatasetColumnTypes(context.Context, *SetDatasetColumnTypesRequest) (*SetDatasetColumnTypesResponse, error)
}

// UnimplementedDatasetsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDatasetsServiceServer struct {
}

func (UnimplementedDatasetsServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) UploadDatasetByLink(context.Context, *UploadDatasetByLinkRequest) (*UploadDatasetByLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDatasetByLink not implemented")
}
func (UnimplementedDatasetsServiceServer) GetDatasets(context.Context, *GetDatasetsRequest) (*GetDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasets not implemented")
}
func (UnimplementedDatasetsServiceServer) GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) GetDatasetRows(context.Context, *GetDatasetRowsRequest) (*GetDatasetRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetRows not implemented")
}
func (UnimplementedDatasetsServiceServer) SetDatasetColumnTypes(context.Context, *SetDatasetColumnTypesRequest) (*SetDatasetColumnTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDatasetColumnTypes not implemented")
}

// UnsafeDatasetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetsServiceServer will
// result in compilation errors.
type UnsafeDatasetsServiceServer interface {
	mustEmbedUnimplementedDatasetsServiceServer()
}

func RegisterDatasetsServiceServer(s grpc.ServiceRegistrar, srv DatasetsServiceServer) {
	s.RegisterService(&DatasetsService_ServiceDesc, srv)
}

func _DatasetsService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_UploadDatasetByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDatasetByLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).UploadDatasetByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_UploadDatasetByLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).UploadDatasetByLink(ctx, req.(*UploadDatasetByLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_GetDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).GetDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_GetDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).GetDatasets(ctx, req.(*GetDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_GetDatasetRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).GetDatasetRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_GetDatasetRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).GetDatasetRows(ctx, req.(*GetDatasetRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_SetDatasetColumnTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDatasetColumnTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).SetDatasetColumnTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_SetDatasetColumnTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).SetDatasetColumnTypes(ctx, req.(*SetDatasetColumnTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetsService_ServiceDesc is the grpc.ServiceDesc for DatasetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.hse_experiments_platform.datasets.api.datasets.DatasetsService",
	HandlerType: (*DatasetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetsService_CreateDataset_Handler,
		},
		{
			MethodName: "UploadDatasetByLink",
			Handler:    _DatasetsService_UploadDatasetByLink_Handler,
		},
		{
			MethodName: "GetDatasets",
			Handler:    _DatasetsService_GetDatasets_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _DatasetsService_GetDataset_Handler,
		},
		{
			MethodName: "GetDatasetRows",
			Handler:    _DatasetsService_GetDatasetRows_Handler,
		},
		{
			MethodName: "SetDatasetColumnTypes",
			Handler:    _DatasetsService_SetDatasetColumnTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datasets/datasets.proto",
}
